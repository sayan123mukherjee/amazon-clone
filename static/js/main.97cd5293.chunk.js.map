{"version":3,"sources":["components/Header/SearchBar/HeaderSearchBar.tsx","components/Header/MyAccount/MyAccount.tsx","components/Header/Cart/Cart.tsx","components/Header/Header.tsx","components/TodoList/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/SubHeading/SubHeading.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HeaderSearchBar","names","useState","dropdownState","changeDropdownState","searchValue","setSearchValue","className","onMouseEnter","onMouseLeave","map","item","name","type","value","onChange","e","target","changeInputHandler","MyAccount","Cart","count","dropdownData","Header","title","TodoListItem","todos","changeHandler","console","log","checked","isComplete","id","todoData","TodoList","foo","lang","Fragment","index","newState","selectUnselectTodo","SubHeading","children","App","bar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97cd5293.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './HeaderSearchBar.scss';\r\n// import {dropDownDataItemType,dropDownDataType} from '../../../types'\r\n\r\nconst HeaderSearchBar: React.FC<dropDownDataType> = ({names}) => {\r\n\r\n  const [dropdownState, changeDropdownState] = useState(false);\r\n  const [searchValue, setSearchValue] = useState<string>('');\r\n\r\n  const dropdownHandler = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n    changeDropdownState(!dropdownState)\r\n  }\r\n\r\n  const changeInputHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setSearchValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className='header-searchbar'>\r\n      <div className='header-searchbar__dropdown'\r\n        onMouseEnter={() => changeDropdownState(true)}\r\n        onMouseLeave={() => changeDropdownState(false)}>\r\n        <button> Show All</button>\r\n        {dropdownState ?\r\n          <div className=\"header-searchbar__dropdown__list\">\r\n            <ul className='header-searchbar__dropdown__list--wrapper'>\r\n              {names.map(item => (\r\n                <li className='header-searchbar__dropdown__list--item'>{item.name}</li>\r\n              ))}\r\n            </ul>\r\n          </div> : null}\r\n      </div>\r\n      <div className='header-searchbar__input'>\r\n        <input type=\"text\"\r\n          name=\"header-searchbar-input\"\r\n          value={searchValue}\r\n          onChange={(e) => changeInputHandler(e)}></input>\r\n        <button>\r\n          <i className=\"material-icons\">search</i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HeaderSearchBar\r\n","import React from 'react';\r\nimport './MyAccount.scss'\r\n\r\ninterface MyAccountProps{\r\n    name: string;\r\n}\r\n\r\nconst MyAccount: React.FC<MyAccountProps> = ({name}) => {\r\n    return (\r\n        <div className=\"header__my-account\">\r\n            <span>Hello, <span className=\"header__my-account__name\">{name}</span></span>\r\n            <div className=\"header__my-account__options\">\r\n                <span>Account and Lists</span>\r\n                <i className=\"material-icons\">navigate_next</i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyAccount;","import React from 'react';\r\nimport './Cart.scss'\r\n\r\ninterface CartProps{\r\n    count: number\r\n}\r\n\r\nconst Cart: React.FC<CartProps> = ({count}) => {\r\n    return (\r\n        <div className=\"header__cart\">\r\n            <span className=\"material-icons header__cart--icon\">shopping_cart</span>\r\n            <span className=\"header__cart--count\">{count}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;","import React, { ReactElement, ReactNode } from 'react';\r\nimport HeaderToggleButton from './ToggleButton/ToggleButton'\r\nimport HeaderSearchBar from './SearchBar/HeaderSearchBar'\r\nimport MyAccount from './MyAccount/MyAccount'\r\nimport Cart from './Cart/Cart'\r\nimport './Header.scss';\r\n// import { dropDownDataType } from '../../types';\r\n\r\ninterface IHeader{\r\n    name: string;\r\n    title: string;\r\n    children?: React.ReactNode\r\n    className?: React.HTMLAttributes<HTMLDivElement>\r\n}\r\n\r\nconst dropdownData:dropDownDataType  = {\r\n    names: [\r\n    { name: 'Amazon fashion' },\r\n    { name: 'Amalzon pantry' },\r\n    { name: 'Amazon devices' },\r\n    { name: 'Appliances' },\r\n    { name: 'Books' },\r\n    { name: 'clothings' }\r\n  ]}\r\n\r\nfunction ts({name,title,children}:IHeader){\r\n    return(\r\n        {children}\r\n    )\r\n\r\n}\r\n\r\nconst Header: React.FC<IHeader> = ({name,title,className}): ReactElement => {\r\n    return (\r\n        <div className=\"header\">\r\n            {/* <HeaderToggleButton></HeaderToggleButton> */}\r\n            <HeaderSearchBar names={dropdownData.names}></HeaderSearchBar>\r\n            <MyAccount name=\"sayan\"></MyAccount>\r\n            <Cart count={4}></Cart>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n// import {TodoItem} from '../../types'\r\n\r\ninterface ITodoListItem{\r\n    todos: TodoItem;\r\n    changeHandler(i:number): void\r\n}\r\n\r\nconst TodoListItem: React.FC<ITodoListItem> = ({todos, changeHandler}) => {\r\n    console.log('props',todos);\r\n    return (\r\n        <label>\r\n            <input type=\"checkbox\" checked={todos.isComplete} onChange={() => changeHandler(todos.id)}></input>\r\n            {todos.title}\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default TodoListItem;","import React,{useState} from 'react';\r\n// import {TodoItem} from '../../types';\r\nimport TodoListItem from '../TodoList/TodoListItem'\r\n\r\nconst todoData: Array<TodoItem> = [\r\n    {id: 1,title: 'wash todays clothes', isComplete: true},\r\n    {id: 2,title: 'complete the ltodo app', isComplete: true}\r\n]\r\n\r\ninterface john extends React.InputHTMLAttributes<HTMLInputElement> {\r\n    foo: string,\r\n    bar: number\r\n}\r\n\r\nconst TodoList: React.FC<john> = ({foo,lang}) => {\r\n\r\n    console.log(foo,lang);\r\n\r\n    const [todoState, setTodoState] = useState(todoData);\r\n\r\n    const selectUnselectTodo = (index:number) => {\r\n       const newState = todoData.map(item => {\r\n           if(item.id === index){\r\n               return {\r\n                   ...item,\r\n                   isComplete: !item.isComplete\r\n               }\r\n           }\r\n           return item;\r\n       })\r\n    //    setTodoState(newState);\r\n    console.log(newState);\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {todoData.map((item) => {\r\n                return <TodoListItem todos={item} changeHandler={(index:number) => selectUnselectTodo(index)}></TodoListItem>\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, { Children } from 'react';\r\nimport { checkValue } from 'module_name';\r\nimport { type } from 'os';\r\n\r\n// checkValue('string');\r\n\r\ntype SubHeadingProps = {\r\n    name?: string,\r\n}\r\n\r\n// functional compoent returns only jsx or null\r\n\r\nconst SubHeading: React.FC<SubHeadingProps> = ({name = 'default',children}) => {\r\n    console.log(children);\r\n    return (\r\n        <p>{name}</p>\r\n    )\r\n}\r\n\r\nexport default SubHeading;","import React, { ReactElement } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport TodoList from './components/TodoList/TodoList';\nimport SubHeading from './components/SubHeading/SubHeading';\n\nconst App: React.FC = (): ReactElement => {\n  return (\n    <React.Fragment>\n      <Header name=\"amazon header\" title=\"amazon title\"></Header>\n      <SubHeading name=\"sayan\"></SubHeading>\n      <TodoList foo={'hello'} bar={123}></TodoList>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}