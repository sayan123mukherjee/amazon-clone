{"version":3,"sources":["components/Directory/DirectoryData.tsx","components/MenuItem/MenuItem.tsx","components/Directory/Directory.tsx","pages/HomePage/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sections","title","imageUrl","id","linkUrl","size","MenuItem","style","backgroundImage","className","key","toUpperCase","Directory","state","Promise","res","rej","then","data","setState","console","log","this","map","React","Component","HomePage","App","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yVAEMA,EAAiC,CACrC,CACEC,MAAO,OACPC,SAAU,oCACVC,GAAI,EACJC,QAAS,aAEX,CACEH,MAAO,UACPC,SAAU,uCACVC,GAAI,EACJC,QAAS,gBAEX,CACEH,MAAO,WACPC,SAAU,wCACVC,GAAI,EACJC,QAAS,iBAEX,CACEH,MAAO,SACPC,SAAU,sCACVG,KAAM,QACNF,GAAI,EACJC,QAAS,eAEX,CACEH,MAAO,OACPC,SAAU,mCACVG,KAAM,QACNF,GAAI,EACJC,QAAS,c,gBCfEE,EAb2B,SAAC,GAA+B,IAA9BL,EAA6B,EAA7BA,MAAME,EAAuB,EAAvBA,GAAID,EAAmB,EAAnBA,SAASG,EAAU,EAAVA,KAC3D,OACG,yBAAKE,MAAO,CAACC,gBAAe,cAAUN,EAAV,MAC5BO,UAAWJ,EAAO,kBAAoB,YACtCK,IAAKP,GACI,yBAAKM,UAAU,WACX,wBAAIA,UAAU,SAASR,EAAMU,eAC7B,0BAAMF,UAAU,YAAhB,eCsBLG,E,kDA3BX,cAAgB,IAAD,6CACX,cAAM,KACDC,MAAQ,CACTb,SAAU,IAHH,E,gEAMK,IAAD,OF0BZ,IAAIc,SAAQ,SAACC,EAAIC,GACpBD,EAAIf,ME1BeiB,MAAK,SAACC,GACrB,EAAKC,SAAS,CAACnB,SAAUkB,IACzBE,QAAQC,IAAI,WAAY,EAAKR,MAAMb,e,+BAIvC,OACI,yBAAKS,UAAU,kBACVa,KAAKT,MAAMb,SAASuB,KAAI,YAA0C,IAAxCtB,EAAuC,EAAvCA,MAAOE,EAAgC,EAAhCA,GAAID,EAA4B,EAA5BA,SAASE,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KACpD,OAAO,kBAAC,EAAD,CAAUJ,MAAOA,EACxBE,GAAIA,EACJD,SAAUA,EACVE,QAASA,EACTC,KAAMA,Y,GArBFmB,IAAMC,WCOfC,G,MARY,WACvB,OACI,yBAAKjB,UAAU,YACX,kBAAC,EAAD,SCUGkB,EATO,WACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWJ,IACxC,kBAAC,IAAD,CAAOE,KAAK,QAAQG,OAAQ,kBAAO,yC,OCDzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.1e49ccac.chunk.js","sourcesContent":["import { directoryData } from \"../../types\";\r\n\r\nconst sections: Array<directoryData> = [\r\n  {\r\n    title: 'hats',\r\n    imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\r\n    id: 1,\r\n    linkUrl: 'shop/hats'\r\n  },\r\n  {\r\n    title: 'jackets',\r\n    imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\r\n    id: 2,\r\n    linkUrl: 'shop/jackets'\r\n  },\r\n  {\r\n    title: 'sneakers',\r\n    imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\r\n    id: 3,\r\n    linkUrl: 'shop/sneakers'\r\n  },\r\n  {\r\n    title: 'womens',\r\n    imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\r\n    size: 'large',\r\n    id: 4,\r\n    linkUrl: 'shop/womens'\r\n  },\r\n  {\r\n    title: 'mens',\r\n    imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\r\n    size: 'large',\r\n    id: 5,\r\n    linkUrl: 'shop/mens'\r\n  }\r\n];\r\n\r\n\r\nexport function getDirectoryData(): Promise<Array<directoryData>>{\r\n    return new Promise((res,rej) => {\r\n        res(sections);\r\n    })\r\n}","import React from 'react'\r\nimport './MenuItem.scss'\r\nimport { directoryData } from '../../types';\r\n\r\n\r\nconst MenuItem: React.FC<directoryData> = ({title,id, imageUrl,size}) => {\r\n    return (\r\n       <div style={{backgroundImage : `url(${imageUrl})`}} \r\n       className={size ? 'menu-item large' : 'menu-item'}\r\n       key={id}>\r\n                <div className=\"content\">\r\n                    <h1 className=\"title\">{title.toUpperCase()}</h1>\r\n                    <span className=\"subtitle\">SHOP NOW</span>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuItem;","import React from 'react';\r\nimport {getDirectoryData} from './DirectoryData'\r\nimport {directoryData} from '../../types';\r\nimport './Directory.scss'\r\nimport MenuItem from '../MenuItem/MenuItem';\r\n\r\nclass Directory extends React.Component<{},{sections:Array<directoryData>}>{\r\n    constructor({}){\r\n        super({});\r\n        this.state = {\r\n            sections: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        getDirectoryData().then((data: Array<directoryData>) => {\r\n            this.setState({sections: data});\r\n            console.log('sections', this.state.sections);\r\n        })\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"directory-menu\">\r\n                {this.state.sections.map(({title, id, imageUrl,linkUrl, size}) => {\r\n                    return <MenuItem title={title} \r\n                    id={id} \r\n                    imageUrl={imageUrl} \r\n                    linkUrl={linkUrl}\r\n                    size={size}></MenuItem>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Directory;","import React from 'react';\r\nimport MenuItem from '../../components/MenuItem/MenuItem'\r\nimport Directory from '../../components/Directory/Directory'\r\nimport './HomePage.scss'\r\n\r\nconst HomePage: React.FC = () => {\r\n    return (\r\n        <div className=\"homepage\">\r\n            <Directory></Directory>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React, { ReactElement } from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport TodoList from './components/TodoList/TodoList';\nimport SubHeading from './components/SubHeading/SubHeading';\nimport SuperExample from './components/playing-around/SuperExample'\nimport HomePage from './pages/HomePage/HomePage'\n\nconst App: React.FC = (): ReactElement => {\n  return (\n      <Switch>\n          <Route path=\"/\" exact={true} component={HomePage}></Route>\n          <Route path=\"/cart\" render={() => (<h1>cart</h1>)}></Route>\n      </Switch>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}